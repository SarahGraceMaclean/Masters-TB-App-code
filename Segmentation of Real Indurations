# -*- coding: utf-8 -*-
"""
Created on Sat Apr 13 16:24:23 2019

@author: Sarah
"""
import numpy as np
import cv2
from skimage import data


images = ['1','2','3','4','5','6','7','8','9','10','11']
 

resize_image_shape = (1000,1200)  

def transform(pos):
# This function is used to find the corners of the object and the dimensions of the object
    pts=[]
    n=len(pos)
    for i in range(n):
        pts.append(list(pos[i][0]))
       
    sums={}
    diffs={}
    for i in pts:
        x=i[0]
        y=i[1]
        sum=x+y
        diff=y-x
        sums[sum]=i
        diffs[diff]=i
    sums=sorted(sums.items())
    diffs=sorted(diffs.items())
    n=len(sums)
    rect=[sums[0][1],diffs[0][1],diffs[n-1][1],sums[n-1][1]]
    #      top-left   top-right   bottom-left   bottom-right
   
    h1=np.sqrt((rect[0][0]-rect[2][0])**2 + (rect[0][1]-rect[2][1])**2)     #height of left side
    h2=np.sqrt((rect[1][0]-rect[3][0])**2 + (rect[1][1]-rect[3][1])**2)     #height of right side
    h=max(h1,h2)
   
    w1=np.sqrt((rect[0][0]-rect[1][0])**2 + (rect[0][1]-rect[1][1])**2)     #width of upper side
    w2=np.sqrt((rect[2][0]-rect[3][0])**2 + (rect[2][1]-rect[3][1])**2)     #width of lower side
    w=max(w1,w2)
   
    return int(w),int(h),rect

for iii in images:  
    
    #try:
            origional_img = cv2.imread(iii+'.jpg',0)
            origional_img_colour = cv2.imread(iii+'.jpg')
#______________________________________________________________________________         
            # Finds the white sticker in the image by: 
            # finding sticker contour and drawing bounding rectangle, using rectangle coordinates to crop and perform affine transformation on origional image
           
            cropped_img_origional = origional_img[int(0):(int(origional_img.shape[0])-int(origional_img.shape[0]/6)), int(origional_img.shape[1]/6):(int(origional_img.shape[1])-int(origional_img.shape[1]/6))]
            cropped_img_origional_colour = origional_img_colour[int(0):(int(origional_img_colour.shape[0])-int(origional_img_colour.shape[0]/6)), int(origional_img_colour.shape[1]/6):(int(origional_img_colour.shape[1])-int(origional_img_colour.shape[1]/6))]
            
            canvas = np.zeros(cropped_img_origional.shape, np.uint8) 
            kernel = np.ones((20,20),np.float32)/25           
            
            thresh = cv2.adaptiveThreshold(cropped_img_origional,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,51,2)
            #ret,thresh = cv2.threshold(cropped_img_origional,140,255,cv2.THRESH_BINARY)
            #img2gray = cv2.filter2D(thresh,-1,kernel)
            
            
            kernel = np.ones((4,4), np.uint8)
            opening = cv2.morphologyEx(thresh,cv2.MORPH_OPEN,kernel, iterations = 1)
            
            #img_erosion = cv2.erode(opening, kernel, iterations=1)
            #img_dilation = cv2.dilate(img_erosion, kernel, iterations=1)
            
            contours,hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
            cnt = contours[0]
            max_area = cv2.contourArea(cnt)
            
            for cont in contours:
                if cv2.contourArea(cont) > max_area:
                    cnt = cont
                    max_area = cv2.contourArea(cont)       
            
                        
            epsilon = 0.1*cv2.arcLength(cnt,True)
            approx1 = cv2.approxPolyDP(cnt,epsilon,True)
                                    
            cv2.drawContours(canvas, cnt, -1, (25, 255, 255), 3)
            cv2.drawContours(canvas, approx1, -1, (225, 25, 255), 10)
 
            #errors in finding sticker can be caused by a solid black background being seen as the bigget contour. Use this test image to see contour which is being used to find the sticker. Can also print the 4 coordinates for the polygons corners using print(iii+str(arr)) and print(iii+str(arr1))
            #cv2.imwrite(iii+'test.jpg',canvas)  
            
            
            #Affine transformation 
            width = int(canvas.shape[1])
            height = int(canvas.shape[0])
            dim1 = (width, height)
            resized = cv2.resize(cropped_img_origional_colour, dim1, interpolation = cv2.INTER_AREA)
            
            size=cropped_img_origional.shape
            w,h,arr=transform(approx1)
            
            arr1 = [arr[0],arr[1],[arr[2][0]-100,size[0]],[arr[1][0]+100,size[0]]]
            
            
            pts2=np.float32([[0,0],[w,0],[0,h],[w,h]])
            pts1=np.float32(arr1)
            M=cv2.getPerspectiveTransform(pts1,pts2)
            dst=cv2.warpPerspective(resized,M,(w,h))
            edges1 = cv2.resize(dst,(w,h),interpolation = cv2.INTER_AREA)
            
            
            border = cv2.copyMakeBorder(edges1,10,10,10,10,cv2.BORDER_CONSTANT,(255,255,255))
            
            img_erosion = cv2.dilate(border, kernel, iterations=2) 
            blur = cv2.cvtColor(img_erosion, cv2.COLOR_BGR2GRAY)
            imgs = cv2.bilateralFilter(blur,21,125,125)
            
            ret,thresh = cv2.threshold(imgs,140,255,cv2.THRESH_BINARY)
            #thresh = cv2.adaptiveThreshold(imgs,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,51,2)
            
            #img_erosion = cv2.dilate(thresh, kernel, iterations=3)
            #img_dilation = cv2.erode(img_erosion, kernel, iterations=4)
            
            canvas1 = np.zeros(border.shape, np.uint8) 
            
            kernel = np.ones((4,4), np.uint8)
            opening = cv2.morphologyEx(thresh,cv2.MORPH_OPEN,kernel, iterations = 1)
            
            contours,hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
            cnt = contours[0]
            max_area = cv2.contourArea(cnt)
            
            for cont in contours:
                if cv2.contourArea(cont) > max_area:
                    cnt = cont
                    max_area = cv2.contourArea(cont)
                        
            epsilon = 0.01*cv2.arcLength(cnt,True)
            approx1 = cv2.approxPolyDP(cnt,epsilon,True)
                                    
            cv2.drawContours(canvas1, cnt, -1, (255, 255, 255), 1)
            cv2.drawContours(canvas1, approx1, -1, (255, 255, 255), 1)
            
            
            #Affine transformation 
            width = int(canvas1.shape[1])
            height = int(canvas1.shape[0])
            dim1 = (width, height)
            resized = cv2.resize(border, dim1, interpolation = cv2.INTER_AREA)
            
            size=origional_img.shape
            w,h,arr=transform(approx1)
             
            pts2=np.float32([[0,0],[w,0],[0,h],[w,h]])
            pts1=np.float32(arr)
            M=cv2.getPerspectiveTransform(pts1,pts2)
            dst=cv2.warpPerspective(resized,M,(w,h))
            edges1 = cv2.resize(dst,(w,h),interpolation = cv2.INTER_AREA)
            
            
            img=edges1
            
            cv2.imwrite('new1.jpg', edges1)            

            #Crop image showing only the induration sticker in half to show only the bottom half of the sticker
            #Crop both a binary image and the origional image to the same size so that affine transformation to follow can be done using coordinates from the binary image but to transform the origional image            
            
            origional_img = cv2.imread('new1.jpg',0)
            ret,thresh = cv2.threshold(origional_img,150,255,cv2.THRESH_BINARY_INV)
            
            final_origional_img = cv2.imread('new1.jpg') 
            
            
            cropped_img_origional = thresh[int(thresh.shape[0]/2):(int(thresh.shape[0])-int(thresh.shape[0]/20)), int(thresh.shape[1]/10):(int(thresh.shape[1])-int(thresh.shape[1]/10))]
            final_cropped_img_origional = final_origional_img[int(thresh.shape[0]/2):(int(thresh.shape[0])-int(thresh.shape[0]/20)), int(thresh.shape[1]/10):(int(thresh.shape[1])-int(thresh.shape[1]/10))]
            
            cropped_img1= cv2.copyMakeBorder(cropped_img_origional,5,5,5,5,cv2.BORDER_CONSTANT,(0,0,0))
            final_cropped_img1= cv2.copyMakeBorder(final_cropped_img_origional,5,5,5,5,cv2.BORDER_CONSTANT,(0,0,0))
        
            
            #Find induration box in image showing the bottom half of the induration sticker
            kernel = np.ones((4,4), np.uint8)
            img_erosion = cv2.erode(cropped_img1, kernel, iterations=3)
            cropped_img = cv2.dilate(img_erosion, kernel, iterations=6)
            

            
            contoursnew,hierarchy = cv2.findContours(cropped_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
            
            cnt = contoursnew[0]
            max_area = cv2.contourArea(cnt)
            
            for cont in contoursnew:
                if cv2.contourArea(cont) > max_area:
                    cnt = cont
                    max_area = cv2.contourArea(cont)
            
            hull = cv2.convexHull(cnt)
            
            epsilon = 0.1*cv2.arcLength(hull,True)
            approx = cv2.approxPolyDP(hull,epsilon,True)
            
            canvasnew = np.zeros(cropped_img.shape, np.uint8)
            
            cv2.drawContours(canvasnew, cnt, -1, (255, 255, 0), 10)
            cv2.drawContours(canvasnew, approx, -1, (60, 255, 50), 50)
 
            cv2.imwrite('new4.jpg',canvasnew)           
            
            #Crops and performs an affine transformation on the origional real image using points specified by contour of rectangle bounding the induration box 
            width = int(canvasnew.shape[1])
            height = int(canvasnew.shape[0])
            dim = (width, height)
            resized = cv2.resize(final_cropped_img1, dim, interpolation = cv2.INTER_AREA)
            
            size=cropped_img.shape
            w,h,arr=transform(approx)
             
            pts2=np.float32([[0,0],[w,0],[0,h],[w,h]])
            pts1=np.float32(arr)
            M=cv2.getPerspectiveTransform(pts1,pts2)
            dst=cv2.warpPerspective(resized,M,(w,h))
            image = cv2.resize(dst,(w,h),interpolation = cv2.INTER_AREA)
            
            correct_size = cv2.resize(image, resize_image_shape)
                        
            cv2.imwrite('new5.jpg', image) 
            cv2.imwrite(iii+'_1_induration'+'.jpg', correct_size)
            
            image = correct_size
            
#_______________________________________________________________________________
            
            #-----Converting image to LAB Color model----------------------------------- 
            lab= cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
            cv2.imwrite("new_lab.jpg",lab)
            
            #-----Splitting the LAB image to different channels-------------------------
            l, a, b = cv2.split(lab)
            cv2.imwrite('new_l_channel.jpg', l)
            cv2.imwrite('new_a_channel.jpg', a)
            cv2.imwrite('new_b_channel.jpg', b)
            
            #-----Applying CLAHE to L-channel-------------------------------------------
            clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
            cl = clahe.apply(l)
            cv2.imwrite('new6.jpg', cl)
            
            #-----Merge the CLAHE enhanced L-channel with the a and b channel-----------
            limg = cv2.merge((cl,a,b))
            
            #-----Converting image from LAB Color model to RGB model--------------------
            final = cv2.cvtColor(limg, cv2.COLOR_LAB2BGR)
            cv2.imwrite('new7.jpg', final)
            
            
            cv2.imwrite(iii+'_2_contrast'+'.jpg', final)
            
            bilateral = cv2.bilateralFilter(final,51,195,195)
            
            cv2.imwrite(iii+'_2_bilateral'+'.jpg', bilateral)
            
            #_____________________________________________________________________________
            
            #gray=cv2.cvtColor(final,cv2.COLOR_BGR2GRAY)
            ret,thresh = cv2.threshold(image,100,255,cv2.THRESH_BINARY_INV)
            
            kernel = np.ones((4,4), np.uint8)
            
            opening = cv2.morphologyEx(thresh,cv2.MORPH_OPEN,kernel, iterations = 1)
            
            img_erosion = cv2.erode(opening, kernel, iterations=2)
            img_dilation = cv2.dilate(img_erosion, kernel, iterations=1)
            
            img_erosion1 = cv2.erode(img_dilation, kernel, iterations=4)
            img_dilation1 = cv2.dilate(img_erosion1, kernel, iterations=4)
            
            cv2.imwrite('new8.jpg', img_dilation1)
            
            #______________________________________________________________________________

            kernel = np.ones((4,4), np.uint8)
            
            opening = cv2.morphologyEx(final,cv2.MORPH_OPEN,kernel, iterations = 1)
            
            img_erosion = cv2.erode(opening, kernel, iterations=3)
            #img_dilation = cv2.dilate(img_erosion, kernel, iterations=2)
            blur = cv2.medianBlur(img_erosion,3)
            
            cv2.imwrite('new8_2.jpg', blur)
            
            
            gray=cv2.cvtColor(blur,cv2.COLOR_BGR2GRAY)
            
            
            
            adaptthresh = cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY_INV,11,6)
            ret,thresh = cv2.threshold(gray,80,255,cv2.THRESH_BINARY)
            
            imageinvert = cv2.bitwise_not(thresh)
            
            cv2.imwrite(iii+'_4_treshold.jpg', adaptthresh)
            
            img_eros = cv2.dilate(adaptthresh, kernel, iterations=1)
            
            cv2.imwrite('new8_5.jpg', img_eros)
            
            #_________________________________________________________________________________
            
            img_hsv=cv2.cvtColor(final, cv2.COLOR_BGR2HSV)
            
            
            # lower mask (0-10)
            lower_red = np.array([0,50,50])
            upper_red = np.array([10,255,255])
            mask0 = cv2.inRange(img_hsv, lower_red, upper_red)
            
            # upper mask (170-180)
            lower_red = np.array([170,50,50])
            upper_red = np.array([180,255,255])
            mask1 = cv2.inRange(img_hsv, lower_red, upper_red)
            
            # join my masks
            mask = mask0+mask1
            
            # set my output img to zero everywhere except my mask
            output_img = img_hsv.copy()
            output_img[np.where(mask==0)] = 0
            
            # or your HSV image, which I *believe* is what you want
            output_hsv = img_hsv.copy()
            output_hsv[np.where(mask==0)] = 0
            
            cv2.imwrite('new9.jpg', output_hsv)
            
            #_____________________________________________________________________________
            
            kernel = np.ones((4,4), np.uint8)
            
            opening = cv2.morphologyEx(output_hsv,cv2.MORPH_OPEN,kernel, iterations = 1)
            
            img_erosion = cv2.erode(opening, kernel, iterations=1)
            img_dilation = cv2.dilate(img_erosion, kernel, iterations=5)
            
            
            cv2.imwrite('new10.jpg', img_dilation)
            
            cv2.imwrite(iii+'_3_red_pixels.jpg', img_dilation)
            
            #_____________________________________________________________________________
            
            img = cv2.cvtColor(img_dilation, cv2.COLOR_BGR2GRAY)
            ret,thresh = cv2.threshold(img,80,255,cv2.THRESH_BINARY)
            img_erosion11 = cv2.erode(thresh, kernel, iterations=8)
            img_dilate11 = cv2.dilate(img_erosion11, kernel, iterations=10)
            
            cv2.imwrite('new11.jpg', img_dilate11)
            
            
            mask = np.full((img.shape[0], img.shape[1]), 0, dtype=np.uint8)  # mask is only 
            
            # get first masked value (foreground)
            fg = cv2.bitwise_or(thresh, thresh, mask=mask)
            
            # get second masked value (background) mask must be inverted
            mask = cv2.bitwise_not(mask)
            background = np.full(thresh.shape, 255, dtype=np.uint8)
            bk = cv2.bitwise_or(background, background, mask=mask)
            
            # combine foreground+background
            final = cv2.bitwise_or(fg, bk)
            
            cv2.imwrite('new12.jpg', final)
            
            #________________________________________________________________________________
            canvasconts = np.zeros(img_eros.shape, np.uint8)
            
            imageinvert = cv2.bitwise_not(img_eros)
            
            img_dilationfinal = cv2.erode(imageinvert, kernel, iterations=1)
            
            contoursnew,hierarchy = cv2.findContours(img_dilationfinal, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
            
            largest_contours = sorted(contoursnew, key=cv2.contourArea)[-50:]
            
            biggestconts = cv2.drawContours(canvasconts, largest_contours, -1, (255, 255, 0), cv2.FILLED)
            
            cv2.imwrite('new13.jpg', biggestconts)
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            #______________________________________________________________________________
            #fit ellipse to image
            
            
            
            img_dilation = cv2.dilate(img_dilation, kernel, iterations=10)
            img_dilation = cv2.bilateralFilter(img_dilation,21,125,125)
            img_dilation = cv2.cvtColor(img_dilation,cv2.COLOR_BGR2GRAY)
            
            #cv2.imwrite(iii+'_3_red_pixels.jpg', img_dilation)
            
            contoursnewbb,hierarchy = cv2.findContours(img_dilation, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
            cntsbb = contoursnewbb[0]
            max_area = cv2.contourArea(cntsbb)
            for cont in contoursnewbb:
                if cv2.contourArea(cont) > max_area:
                    cntsbb = cont
                    max_area = cv2.contourArea(cont) 
          
            
            
            canvas = np.zeros(resize_image_shape, np.uint8)
            cv2.drawContours(canvas, cntsbb, -1, (255, 255, 255), 5)
            
            
            image_with_ellipse = correct_size.copy()
            ellipse = cv2.fitEllipse(cntsbb)
            ellipse1 = cv2.ellipse(image_with_ellipse, ellipse, (255,0,0), 10,cv2.LINE_AA)
            
            #Find ellipse diameter using MA (major axis of ellipse) 
            #Assuming the induration box is 20mm wide, therefore 1000(image width in pixels)/50 to get diameter in mm
            (x,y),(MA,ma),angle = cv2.fitEllipse(cntsbb)
            diameter = int(MA/50)                
         
            cv2.imwrite(iii+'_4_ellipse'+'.jpg', ellipse1)
            print(iii+' ellipse diameter: '+ str(diameter)+'mm')
            
# =============================================================================
#     except:
#         print('cannot find induration box in'+iii)        
# =============================================================================


